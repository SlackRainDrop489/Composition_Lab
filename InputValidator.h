//
// Created by Quinn on 9/26/2025.
// AI WAS USED TO MAKE THE CODE IN THIS FILE
// The code in this file was generated by Gemini AI so that I could have a powerful input checker
// The reason for doing this was because my previous input checker was not as powerful or as useful as this one
//

#ifndef OBJECTS_CLASSES_LAB_INPUTVALIDATOR_H
#define OBJECTS_CLASSES_LAB_INPUTVALIDATOR_H

#include <string>
#include <iostream>
#include <limits>

class InputValidator {

public:
    template <typename T>
    static T getValidInput(const std::string& prompt) {
        T value;

        // Loop until valid input is successfully read
        while (true) {
            std::cout << prompt;

            // Attempt to read the value of type T
            if (std::cin >> value) {
                // Input successful! Check for trailing junk characters (e.g., "5a").
                if (std::cin.peek() == '\n' || std::cin.eof()) {
                    // Input is clean.
                    break;
                } else {
                    // Extra characters were found.
                    std::cout << "Invalid input. Please enter only the required number without extra characters.\n";

                    // Clear the error flags and ignore the remaining input.
                    std::cin.clear();
                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                }
            } else {
                // Input failed (e.g., user entered a letter when a number was expected).
                std::cout << "Invalid data type. Please enter a valid number.\n";

                // 1. Clear the error state flags
                std::cin.clear();

                // 2. Discard all characters currently in the input buffer.
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            }
        }
        return value;
    }
};


#endif //OBJECTS_CLASSES_LAB_INPUTVALIDATOR_H
